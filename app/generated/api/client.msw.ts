/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker/locale/ja";
import { HttpResponse, delay, http } from "msw";
import {
  EnrollmentState,
  LanguageIdentifier,
  ModelingPopulation,
} from "./schemas";
import type {
  Message,
  NoteListResponse,
  PostListResponse,
  SearchResponse,
  TopicListResponse,
  UserEnrollment,
} from "./schemas";

export const getPingApiV1SystemPingGetResponseMock = (
  overrideResponse: Partial<Message> = {},
): Message => ({ message: faker.string.alpha(20), ...overrideResponse });

export const getGetUserEnrollmentByParticipantIdApiV1DataUserEnrollmentsParticipantIdGetResponseMock =
  (overrideResponse: Partial<UserEnrollment> = {}): UserEnrollment => ({
    enrollmentState: faker.helpers.arrayElement(Object.values(EnrollmentState)),
    modelingGroup: faker.number.int({ min: 0, max: undefined }),
    modelingPopulation: faker.helpers.arrayElement(
      Object.values(ModelingPopulation),
    ),
    participantId: faker.helpers.fromRegExp("^[0-9A-F]{64}$"),
    successfulRatingNeededToEarnIn: faker.number.int({
      min: 0,
      max: undefined,
    }),
    // @ts-expect-error OpenAPI Spec の型が厳格すぎるので、そちらを緩めるまでエラーを無視する (コード生成のたびにコメント追加が必要)
    timestampOfLastEarnOut: faker.helpers.arrayElement([
      faker.number.int({ min: 1152921600000, max: 1738808503154 }),
      faker.string.alpha(20),
    ]),
    // @ts-expect-error OpenAPI Spec の型が厳格すぎるので、そちらを緩めるまでエラーを無視する (コード生成のたびにコメント追加が必要)
    timestampOfLastStateChange: faker.helpers.arrayElement([
      faker.number.int({ min: 1152921600000, max: 1738808503154 }),
      faker.string.alpha(20),
      faker.string.alpha(20),
    ]),
    ...overrideResponse,
  });

export const getGetTopicsApiV1DataTopicsGetResponseMock = (
  overrideResponse: Partial<TopicListResponse> = {},
): TopicListResponse => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    label: {
      [faker.string.alphanumeric(5)]: faker.string.alpha(20),
    },
    referenceCount: faker.number.int({ min: 0, max: undefined }),
    topicId: faker.number.int({ min: 0, max: undefined }),
  })),
  ...overrideResponse,
});

export const getGetNotesApiV1DataNotesGetResponseMock = (
  overrideResponse: Partial<NoteListResponse> = {},
): NoteListResponse => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.number.int({ min: 1152921600000, max: 1738808503163 }),
    currentStatus: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "NEEDS_MORE_RATINGS",
        "CURRENTLY_RATED_HELPFUL",
        "CURRENTLY_RATED_NOT_HELPFUL",
      ] as const),
      null,
    ]),
    language: faker.helpers.arrayElement(Object.values(LanguageIdentifier)),
    noteId: faker.helpers.fromRegExp("^[0-9]{19}$"),
    postId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
    summary: faker.string.alpha(20),
    topics: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      label: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20),
      },
      referenceCount: faker.number.int({ min: 0, max: undefined }),
      topicId: faker.number.int({ min: 0, max: undefined }),
    })),
  })),
  meta: {
    next: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.url(), null]),
      undefined,
    ]),
    prev: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.url(), null]),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetPostsApiV1DataPostsGetResponseMock = (
  overrideResponse: Partial<PostListResponse> = {},
): PostListResponse => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.number.int({ min: 1152921600000, max: 1738808503169 }),
    impressionCount: faker.number.int({ min: 0, max: undefined }),
    likeCount: faker.number.int({ min: 0, max: undefined }),
    link: faker.internet.url(),
    links: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({ linkId: faker.string.uuid(), url: faker.internet.url() })),
      undefined,
    ]),
    mediaDetails: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        height: faker.number.int({ min: 0, max: undefined }),
        mediaKey: faker.string.alpha(20),
        type: faker.helpers.arrayElement([
          "photo",
          "video",
          "animated_gif",
        ] as const),
        url: faker.internet.url(),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      undefined,
    ]),
    postId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
    repostCount: faker.number.int({ min: 0, max: undefined }),
    text: faker.string.alpha(20),
    xUser: {
      followersCount: faker.number.int({ min: 0, max: undefined }),
      followingCount: faker.number.int({ min: 0, max: undefined }),
      name: faker.string.alpha(20),
      profileImage: faker.internet.url(),
      userId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
    },
    xUserId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
  })),
  meta: {
    next: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.url(), null]),
      undefined,
    ]),
    prev: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.url(), null]),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getSearchApiV1DataSearchGetResponseMock = (
  overrideResponse: Partial<SearchResponse> = {},
): SearchResponse => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.number.int({ min: 1152921600000, max: 1738808503291 }),
    currentStatus: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "NEEDS_MORE_RATINGS",
        "CURRENTLY_RATED_HELPFUL",
        "CURRENTLY_RATED_NOT_HELPFUL",
      ] as const),
      null,
    ]),
    language: faker.helpers.arrayElement(Object.values(LanguageIdentifier)),
    noteId: faker.helpers.fromRegExp("^[0-9]{19}$"),
    post: {
      createdAt: faker.number.int({ min: 1152921600000, max: 1738808503169 }),
      impressionCount: faker.number.int({ min: 0, max: undefined }),
      likeCount: faker.number.int({ min: 0, max: undefined }),
      link: faker.internet.url(),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          linkId: faker.string.uuid(),
          url: faker.internet.url(),
        })),
        undefined,
      ]),
      mediaDetails: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          height: faker.number.int({ min: 0, max: undefined }),
          mediaKey: faker.string.alpha(20),
          type: faker.helpers.arrayElement([
            "photo",
            "video",
            "animated_gif",
          ] as const),
          url: faker.internet.url(),
          width: faker.number.int({ min: 0, max: undefined }),
        })),
        undefined,
      ]),
      postId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
      repostCount: faker.number.int({ min: 0, max: undefined }),
      text: faker.string.alpha(20),
      xUser: {
        followersCount: faker.number.int({ min: 0, max: undefined }),
        followingCount: faker.number.int({ min: 0, max: undefined }),
        name: faker.string.alpha(20),
        profileImage: faker.internet.url(),
        userId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
      },
      xUserId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
    },
    postId: faker.helpers.fromRegExp("^([0-9]{1,19}|)$"),
    summary: faker.string.alpha(20),
    topics: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      label: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20),
      },
      referenceCount: faker.number.int({ min: 0, max: undefined }),
      topicId: faker.number.int({ min: 0, max: undefined }),
    })),
  })),
  meta: {
    next: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.url(), null]),
      undefined,
    ]),
    prev: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.url(), null]),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getPingApiV1SystemPingGetMockHandler = (
  overrideResponse?:
    | Message
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Message> | Message),
) => {
  return http.get("*/api/v1/system/ping", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPingApiV1SystemPingGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetUserEnrollmentByParticipantIdApiV1DataUserEnrollmentsParticipantIdGetMockHandler =
  (
    overrideResponse?:
      | UserEnrollment
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<UserEnrollment> | UserEnrollment),
  ) => {
    return http.get(
      "*/api/v1/data/user-enrollments/:participantId",
      async (info) => {
        await delay(1000);

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getGetUserEnrollmentByParticipantIdApiV1DataUserEnrollmentsParticipantIdGetResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        );
      },
    );
  };

export const getGetTopicsApiV1DataTopicsGetMockHandler = (
  overrideResponse?:
    | TopicListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TopicListResponse> | TopicListResponse),
) => {
  return http.get("*/api/v1/data/topics", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTopicsApiV1DataTopicsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetNotesApiV1DataNotesGetMockHandler = (
  overrideResponse?:
    | NoteListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NoteListResponse> | NoteListResponse),
) => {
  return http.get("*/api/v1/data/notes", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetNotesApiV1DataNotesGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPostsApiV1DataPostsGetMockHandler = (
  overrideResponse?:
    | PostListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PostListResponse> | PostListResponse),
) => {
  return http.get("*/api/v1/data/posts", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsApiV1DataPostsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSearchApiV1DataSearchGetMockHandler = (
  overrideResponse?:
    | SearchResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SearchResponse> | SearchResponse),
) => {
  return http.get("*/api/v1/data/search", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchApiV1DataSearchGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getFastAPIMock = () => [
  getPingApiV1SystemPingGetMockHandler(),
  getGetUserEnrollmentByParticipantIdApiV1DataUserEnrollmentsParticipantIdGetMockHandler(),
  getGetTopicsApiV1DataTopicsGetMockHandler(),
  getGetNotesApiV1DataNotesGetMockHandler(),
  getGetPostsApiV1DataPostsGetMockHandler(),
  getSearchApiV1DataSearchGetMockHandler(),
];
